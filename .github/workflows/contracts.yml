name: Contracts

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      # Install Node dependencies with lockfile-aware fallback
      - name: Install deps
        working-directory: contracts
        run: |
          if [ -f package-lock.json ]; then
            # Try clean install using lockfile; fall back if lock is out of sync
            npm ci --no-audit --no-fund || npm install --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi
      - name: Compile (clean and force)
        working-directory: contracts
        run: |
          npx hardhat clean
          npx hardhat compile --force
      
      - name: Install circuits dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential
          # Install snarkjs globally
          npm install -g snarkjs
          # Install circom
          wget -O /tmp/circom-linux-amd64 https://github.com/iden3/circom/releases/latest/download/circom-linux-amd64
          sudo mv /tmp/circom-linux-amd64 /usr/local/bin/circom
          sudo chmod +x /usr/local/bin/circom
          
      - name: Build circuits and generate test proofs
        env:
          PTAU: ../tools/powersOfTau28_hez_final_14.ptau
        run: |
          cd circuits
          # Ensure Powers of Tau file exists (need larger file for 6865*2 constraints)
          mkdir -p ../tools
          if [ ! -f "../tools/powersOfTau28_hez_final_14.ptau" ]; then
            echo "Downloading Powers of Tau file (2^14 = 16384 constraints)..."
            # Try multiple sources for the PTAU file
            if ! curl -L -f -o "../tools/powersOfTau28_hez_final_14.ptau" \
              "https://storage.googleapis.com/zkevm/ptau/powersOfTau28_hez_final_14.ptau"; then
              echo "Primary download failed, trying alternative source..."
              if ! curl -L -f -o "../tools/powersOfTau28_hez_final_14.ptau" \
                "https://hermez.s3-eu-west-1.amazonaws.com/powersOfTau28_hez_final_14.ptau"; then
                echo "Alternative download failed, trying GitHub releases..."
                curl -L -f -o "../tools/powersOfTau28_hez_final_14.ptau" \
                  "https://github.com/iden3/snarkjs/releases/download/v0.4.10/powersOfTau28_hez_final_14.ptau" || \
                {
                  echo "All downloads failed. Using existing local file if available..."
                  if [ -f "../tools/pot14_final.ptau" ]; then
                    echo "Using existing pot14_final.ptau"
                    cp "../tools/pot14_final.ptau" "../tools/powersOfTau28_hez_final_14.ptau"
                  else
                    echo "No suitable PTAU file found. Exiting."
                    exit 1
                  fi
                }
              fi
            fi
            # Verify the file was downloaded correctly
            if [ -f "../tools/powersOfTau28_hez_final_14.ptau" ]; then
              file_size=$(stat -c%s "../tools/powersOfTau28_hez_final_14.ptau")
              echo "Downloaded PTAU file size: $file_size bytes"
              if [ "$file_size" -lt 1000000 ]; then
                echo "Downloaded file is too small, likely an error page. Removing and exiting."
                rm -f "../tools/powersOfTau28_hez_final_14.ptau"
                exit 1
              fi
            fi
          fi
          # Make scripts executable
          chmod +x scripts/*.sh
          # Run the circuit compilation and setup
          if [ -f scripts/compile.sh ]; then
            ./scripts/compile.sh
          fi
          if [ -f scripts/setup.sh ]; then
            ./scripts/setup.sh
          fi
          # Generate proof for tests
          if [ -f scripts/prove.sh ]; then
            ./scripts/prove.sh
          fi
        continue-on-error: false
      
      - name: Test
        working-directory: contracts
        run: |
          npx hardhat test
      - name: Coverage (solidity-coverage)
        working-directory: contracts
        env:
          COVERAGE: "1"
        run: |
          npx hardhat coverage
      - name: Generate solidity coverage badge
        if: github.event_name == 'push'
        run: |
          # Compute total line coverage from lcov.info (tolerate missing file)
          cat > generate_badge.js << 'EOF'
          const fs = require('fs');
          const path = 'contracts/coverage/lcov.info';
          let LF = 0, LH = 0;
          if (fs.existsSync(path)) {
            const txt = fs.readFileSync(path, 'utf8');
            for (const line of txt.split(/\n/)) {
              if (line.startsWith('LF:')) LF += parseInt(line.slice(3).trim(), 10);
              if (line.startsWith('LH:')) LH += parseInt(line.slice(3).trim(), 10);
            }
          } else {
            console.log('coverage lcov not found at', path, '- defaulting to 0%');
          }
          const pct = LF > 0 ? Math.round((LH / LF) * 100) : 0;
          const color = pct >= 90 ? '#4c1' : pct >= 75 ? '#97CA00' : pct >= 60 ? '#dfb317' : pct >= 40 ? '#fe7d37' : '#e05d44';
          const label = 'solidity coverage';
          const val = pct + '%';
          const charW = 7, pad = 20;
          const labelW = Math.max(96, Math.round(charW * label.length + pad));
          const valW = Math.max(56, Math.round(charW * val.length + pad));
          const width = labelW + valW;
          const svg = `<?xml version="1.0" encoding="UTF-8"?>
          <svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="20">
            <linearGradient id="b" x2="0" y2="100%">
              <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
              <stop offset="1" stop-opacity=".1"/>
            </linearGradient>
            <mask id="a"><rect width="${width}" height="20" rx="3" fill="#fff"/></mask>
            <g mask="url(#a)">
              <rect width="${labelW}" height="20" fill="#555"/>
              <rect x="${labelW}" width="${valW}" height="20" fill="${color}"/>
              <rect width="${width}" height="20" fill="url(#b)"/>
            </g>
            <g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">
              <text x="${labelW/2}" y="14">${label}</text>
              <text x="${labelW + valW/2}" y="14">${val}</text>
            </g>
          </svg>`;
          fs.mkdirSync('badges', {recursive: true});
          fs.writeFileSync('badges/solidity-coverage.svg', svg);
          console.log('Wrote badges/solidity-coverage.svg with', pct+'%');
          EOF
          node generate_badge.js
          rm generate_badge.js
      - name: Commit solidity coverage badge
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add badges/solidity-coverage.svg
          git diff --staged --quiet || git commit -m "Update solidity coverage badge [skip ci]" || true
          git push || true
      - name: Deploy to in-process hardhat network
        working-directory: contracts
        run: |
          npx hardhat run scripts/deploy.js
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contract-artifacts
          path: |
            contracts/artifacts
            contracts/coverage
            contracts/deployments
            contracts/deployed_addresses.json
